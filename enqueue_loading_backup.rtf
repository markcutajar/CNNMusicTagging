{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0     def load_q(self, sess):\
        """Function for the loading thread"""\
        maxp = self.tids.shape[0]\
        lowp = 0\
\
        while sess.run(self.q.size()) < self.maxq:\
            topp = lowp + self.batch_size\
\
            if topp <= maxp:\
                toload = self.tids[lowp:topp]\
                ctargets = np.delete(self.targets[lowp:topp], np.s_[(self.target_size-self.targets.shape[1])::], axis=1)\
\
                for idx, tid in enumerate(toload):\
                    \
                    loaded = np.load(self.data_dir + str(tid) + '.npy')\
                    if idx == 0:\
                        cdata = loaded\
                    else:\
                        cdata=np.vstack((cdata, loaded))\
                lowp = topp\
\
            else:\
                ovrp = topp-maxp\
                \
                toload = self.tids[lowp:-1]\
                ctargets = np.delete(self.targets[lowp: -1], np.s_[(self.target_size-self.targets.shape[1])::], axis=1)\
                ovrp = 0\
                \
                #toload = np.vstack(self.tid[lowp:maxp], self.tid[0:ovrp])\
                #ctargets = np.vstack(self.targets[lowp:topp], self.targets[0:ovrp])\
                #ctargets = np.delete(ctargets, np.s_[(self.target_size-self.targets.shape[1])::], axis=1)\
\
                \
                \
                for idx, tid in enumerate(toload):\
                    loaded = np.load(self.data_dir + str(tid) + '.npy')\
                    if idx == 0:\
                        cdata = loaded\
                    else:\
                        cdata=np.vstack((cdata, loaded))\
                lowp = ovrp\
            \
            try:\
                sess.run(self.enqop, feed_dict=\{self.q_din: cdata, self.q_tin: ctargets\})\
            except tf.errors.CancelledError:\
                return}